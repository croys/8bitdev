;   "bigint": variable precision integers

;   In this file we annotate storage used by each function with the following:
;     (p) - preserved: value at exit is the same at entry
;     (w) - written: value at exit is an intended output value
;     (d) - destroyed: value at exit may be different from value at entry
;           and is not useful
;   Two letters are given for pointers: the first for the pointer itself
;   and the second for the contents of the buffer to which it points.
;   Flags should be considered destroyed unless otherwise specified.

;---------------------------------------------------------------------

;   Bigints are stored in big-endian format on 6502: a length byte
;   followed by the integer in two's complement format.
;
;   We use big-endian format, despite being the opposite of native
;   6502 order, because we generally want to loop from the LSB to the
;   MSB and looping towards zero saves means we can start with the
;   length and decrement and compare with zero, saving the CMP we'd
;   need to do if counting up to the length.

;---------------------------------------------------------------------
            .radix h

            .globl convascdigit
            .globl bi_readhex, bi_read_dec

            .area ZP  (abs,pag)
            .org 0
            ;   Reserve the first 16 bytes of the zero page for system-
            ;   specific storage such as a BIOS or ROM I/O routines and
            ;   the PIO registers on 6510 (C64 etc.)
            .ds  10
            .area   _CODE

;---------------------------------------------------------------------
;   Routines that do not need memory storage

;   Convert ASCII character to binary number in bases up to 41.
;   This translates A-Z[\]^_ and a-z{|}~DEL as 10, 11...40.
;   The caller must check the returned value if the intended base was
;   less than 41.
;
;          A: (w) ASCII character to convert; binary number on return
;     N flag: (w) clear on success, set on error.
;       X, Y: (p)
;
convascdigit:
            ;   This routine has extra explanation for 6502 beginners.
            cmp #'9+1
            bcs 5$              ; >'9', convert letter
            ;   At this point we know that the carry is clear, better thought
            ;   of as the borrow being set. Rather than use an extra instr
            ;   to set the carry, we instead subtract 1 from the subtrahend
            ;   because the set borrow will also be subtracted from the result.
            sbc #'0-1           ; convert digit; if <'0', N flag set for error
            ;   Normally for an unsigned comparison we'd check to see if the
            ;   carry is clear, i.e., the borrow was used, to determine
            ;   whether our result was negative. We can't do this here to see
            ;   if our char was < '0' because of the optimization above. But
            ;   it's safe to check the N flag because we know from the check at
            ;   the start that the char was ≤ $39 ('9') and so this will
            ;   always produce a result between $39-$30=$09 and $00-$30=-$30
            ;   ($D0 in two's complement), all values of which are negative.
            ;   Since the N flag is our error code, we need not even BMI;
            ;   just let the N flag pass through.
            rts                 ; N clear, no error
5$:
            and #$%11011111     ; clear bit 5 to convert to upper-case
            ;   Now the char is in one of two ranges:
            ;     $3A-$40  chars between '9' and 'A'
            ;     $40-$5F  A-Z and punctuation after ([\]^_)
            ;     $80-$FF  chars above DEL
            ;   We check the N flag here to see if the high bit is set, which
            ;   means the character is invalid. We have to do the AND first
            ;   because the N bit from the CMP test is based on the result
            ;   of the CMP subtraction.
            bmi 9$              ; high bit set, error
            ;   We subtract 'A'-$0A to bring it down to the $00-$28 range,
            ;   No SEC is needed before this SBC; we branched here because the
            ;   carry was already set and AND does not affect the carry.
            sbc #'A-0A
            ;   Values less than $0A are invalid, so error out on those.
            cmp #0A             ; if <$0A, set N flag to indicate error
            ;   The result of SBC is signed, so it may be, e.g., -$01 = $FF.
            ;   However, CMP does only unsigned comparisons so the carry flag
            ;   would be set (indicating ≥) rather than clear (indicating <)
            ;   for those "negative" results. But since we know our value in A
            ;   is in range $00-$28, the most negative possible result produced
            ;   by the SBC is -$28 = $D8, so we can check the N flag instead.
            ;   Since the N flag is our error code, we need not even BMI.
9$:         rts

;---------------------------------------------------------------------
;   Temporary storage bytes that may be destroyed by subroutine calls.
;   Since subroutines are allowed to destroy these at will, they may
;   be used freely, but only between subroutine calls.
            .area ZP  (abs,pag)
temp1:      .ds     1
temp2:      .ds     1
            .area   _CODE

;   Routines that need "buffers," or generic pointers to memory with
;   an optional length, use a standard set defined here. `buf0` is the
;   "innermost" pointer/len to be used as a parameter for routines
;   that do not call other buffer-using routines. Routines that call
;   that should, where they can't use the higher values (`buf1`, etc.)
;   as their parameters.
;
;   Some routines also need a "scratch" buffer for temporary storage,
;   generally allocated by the caller based on lengths of other
;   parameters. This has its own special pointer and length. 
;
;   Where routines use multiple buffers, typically these are ouput,
;   input and scratch in order of increasing buffer number.
;
;   In all cases it's carefully documented whether the pointer, the
;   length and the buffer itself are preserved, overwritten or
;   destroyed, per the coding at the top of this file.

            .area ZP  (abs,pag)
bufSptr:    .ds  2              ; pointer to a buffer
bufSlen:    .ds  1              ; length of that buffer
buf0ptr:    .ds  2
buf0len:    .ds  1
buf1ptr:    .ds  2
buf1len:    .ds  1
buf2ptr:    .ds  2
buf2len:    .ds  1
buf3ptr:    .ds  2
buf3len:    .ds  1
            .area   _CODE

;---------------------------------------------------------------------
;   Read the ASCII hex two's complement representation of an integer
;   and convert it to a bigint. The first bit is the sign, i.e.,
;   `FF00` will be read as -256 decimal; a minus prefix is not
;   allowed.
;
;            X, Y: (d)
;               A: (d) buf0ptr length; 1 <= A <= 255
;         buf0ptr: (d) pointer to input char buffer
;       [buf0ptr]: (p) input chars
;         buf1ptr: (d) output buffer, must be length (A+1)/2.
;       [buf1ptr]: (w) bigint output
;
bi_readhex: ldx #0              ; constant for indirect addressing
            ;   Start by skipping past any leading '0's.
            tay                 ; save length
0$:         lda [*buf0ptr,x]
            cmp #'0
            bne 3$              ; no (more) leading zeros; start conversion
            dey                 ; reduce length
            beq 2$              ; but if it's last digit, convert the 0 anyway
            inc *buf0ptr       ; move past leading 0
            bne 1$
            inc *buf0ptr+1
1$:         clc
            bcc 0$
            ;   Conversion, two input digits at a time
2$:         iny
3$:         tya                 ; copy input length to A
            dey                 ; length -1 = last byte of input buffer
4$:         clc
            ror                 ; output length is 1/2 input length
            adc #0              ; plus 1 if input length is odd
            sta [*buf1ptr,x]  ; store output length
            adc *buf1ptr      ; set buf1ptr to end of buffer
            sta *buf1ptr
            bcc 5$
            inc *buf1ptr+1
5$:         lda [*buf0ptr],y   ; first char for this byte of output buffer
            jsr convascdigit    ; convert ASCII digit to binary
            bmi 9$              ; bad digit, error
            cmp #10
            bcs 9$              ; >=16, error
            sta [*buf1ptr,x]
            dey                 ; second char for this byte of output buffer
            bmi 8$              ; if input done, return success
            lda [*buf0ptr],y
            jsr convascdigit    ; convert ASCII digit to binary
            bmi 9$              ; bad digit, error
            cmp #10
            bcs 9$              ; >=16, error
            asl                 ; shift up to high nybble
            asl
            asl
            asl
            clc
            adc [*buf1ptr,x]
            sta [*buf1ptr,x]
            dec *buf1ptr
            lda *buf1ptr
            cmp #0FF
            bne 6$
            dec *buf1ptr+1
6$:         dey
            cpy #0FF
            bne 5$              ; next chars
8$:         rts                 ; success; return
9$:         brk                 ; readhex error

;---------------------------------------------------------------------

;   In-place unsigned multiply by ten of a buffer. The value must be
;   sufficiently small that the multiplication cannot overflow. This
;   requires a scratch buffer of the same length as the number to be
;   multiplied.
;
;          A, Y: (d)
;             X: (p)
;       buf0len: (p) [buf0ptr] length; 1 <= buf0len <= 255
;       buf0ptr: (p) pointer to output buffer address - 1
;     [buf0ptr]: (w) pointer to output buffer address - 1
;       bufSptr: (p) pointer to scratch buffer address - 1
;     [bufSptr]: (d) pointer to scratch buffer address - 1
;
;   Notes: It would be nice if ROL could use indirect addressing to
;   avoid the load/store through A, but it probably doesn't make that
;   much difference; we're currently under 100 cycles per byte of
;   input anyway.
;
bi_x10u:    ldy buf0len
            ;   Multiply the buffer by 2
            clc
2$:         lda [buf0ptr],y
            rol
            sta [buf0ptr],y
            dey
            bne 2$
            ;   Make a copy of the ×2 value for later addition
            ldy buf0len
3$:         lda [buf0ptr],y
            sta [bufSptr],y
            dey
            bne 3$
            ;   Multiply buffer by 2 again, for ×4
            ldy buf0len
            clc
4$:         lda [buf0ptr],y
            rol
            sta [buf0ptr],y
            dey
            bne 4$
            ;   Multiply buffer by 2 again, for ×8
            ldy buf0len
            clc
8$:         lda [buf0ptr],y
            rol
            sta [buf0ptr],y
            dey
            bne 8$
            ;   Add the ×2 value, for ×10
            ldy buf0len
            clc
10$:        lda [bufSptr],y
            adc [buf0ptr],y
            sta [buf0ptr],y
            dey
            bne 10$
            rts

;   Read the ASCII unsigned decimal representation of an integer and
;   convert it to a non-normalized (i.e., may have leading 0 bytes as
;   the MSBs) bigint. Leading zeros are converted. All characters must
;   be ASCII decimal digits. No error checking of input characters is
;   done; bad input produces an undefined result.
;
;   The output buffer must be preloaded with $00 bytes, at least 2 bytes
;   in length, and large enough to hold the output. A reasonable
;   heuristic for the size is half the number of digits in the input,
;   rounded up; in the worst case this will be about 20% larger than
;   necessary, but for up to 22 digit inputs the worst case is only
;   two bytes larger.
;
;   XXX distinguish between buffer pointer and buffer contents preserved
;
;         A, X: (d)
;            Y: (d)  [buf1ptr] (input) length; 1 <= Y <= 255
;      buf0ptr: (pw) output buffer address - 1; preload with $00, len as above
;      buf0len: (p)  output buffer length; see conditions above
;      buf1ptr: (pp) input chars buffer address
;      bufSptr: (pd) scratch buffer address - 1; len as above
;        inlen: temporary storage; destroyed
;     curdigit: temporary storage; destroyed
;
bi_read_udec:
            sty *inlen          ; save input length
            lda #0
            sta *curdigit       ; initial current digit index
30$:
            ;   Multiply current intermediate value (buf0ptr) by ten
            jsr bi_x10u
            ;   Add in the current digit.
            ldy *curdigit
            inc *curdigit       ; for next loop iteration
            lda [buf1ptr],y     ; load this digit
            eor #30             ; convert ASCII to binary
            ldy buf0len
            clc
            adc [buf0ptr],y     ; add binary value of digit
            sta [buf0ptr],y     ;  into LSB
            lda #0              ; prepare to propagate carry
            dey
50$:        adc [buf0ptr],y     ; propagate carry
            dey
            bne 50$             ; not done; continue propagation
            lda *curdigit       ; digits remaining
            cmp *inlen
            beq 99$             ; none, we're done
            clc
            bcc 30$             ; continue with next digit
99$:        rts

            .area ZP  (abs,pag)
inlen   :   .ds 1               ; temporary storage
curdigit:   .ds 1               ; temporary storage
            .area _CODE

;   Read the ASCII signed decimal representation of an integer and convert
;   it to a bigint. The first character may be a optional `+` or `-` sign;
;   all other characters must be ASCII decimal digits. No error checking of
;   input characters is done; bad input produces an undefined result.
;
;   The temporary buffers pointed to by buf0ptr and bufSptr should be half
;   the length of the input rounded up plus one byte , with a minimum
;   length of 2. (XXX These should probably be allocated and freed by this
;   routine.)
;
;   The ouput buffer will be a 1-byte count of the length followed by
;   that many bytes.
;
;            A,X: (d)
;              Y: (d)  [buf1ptr] (input) length; 1 <= A <= 255
;        bufSptr: (pd) scratch buffer addr - 1; for length see above
;        buf0ptr: (dd) temp buffer addr - 1; for length see above
;        buf1ptr: (dp) pointer to start of input chars
;       buf2ptr₁: (dw) pointer to output buffer - 1
;
bi_read_dec:
            ldx #0              ; constant for indirect addressing, etc.
            ;   Check for and process a `+` or `-` prefix
            stx *sign            ; assume positive
            lda [buf1ptr,x]
            cmp #'-
            bne 110$            ; no, doesn't start with `-` sign
            dec *sign            ; change sign to negative
            bmi 150$            ; always branch to remove sign char
110$:       cmp #'+
            bne 200$            ; skip sign char removal
150$:       ;   Remove the sign char from the input
            dey                 ; [buf1ptr] length
            inc buf1ptr
            bne 200$
            inc buf1ptr+1
            ;   XXX everything past this point wants some optimizing
200$:       ;   Skip past leading zeros (except last char, of course)
            cpy #1              ; on last char of input?
            beq 250$            ; XXX yes, special case for single-digit conversion
            lda [*buf1ptr,x]
            cmp #'0             ; leading zero?
            bne 300$            ; no, start conversion
            dey                 ; otherwise dec length and skip stat past it
            inc *buf1ptr
            bne 200$
            inc *buf1ptr+1
            sec
            bcs 200$
250$:       ;   We have only one char of input. We special-case 0 because
            ;   it breaks our leading-zero-digit removal during later
            ;   normalization. Also, it may be a common case so fast is nice.
            lda [*buf1ptr,x]
            cmp #'0
            bne 300$            ; not zero, continue with standard conversion
            ldy #1              ; output length byte location
            tya                 ; output length value
            sta [*buf2ptr],y
            iny                 ; output value location
            lda #0              ; output value
            sta [*buf2ptr],y
            rts
300$:
            ;   Preload output buf0ptr with $00 for bi_read_udec.
            sty *buf1len        ; remaining input length
            tya
            clc
            ror a               ; divide by two, leaving old LSb in carry
            adc #1              ; round up and ensure length is at least 2
            sta *buf0len        ; bi_read_udec temp/scratch buf len param
            tay
            lda #0
310$:       sta [buf0ptr],y     ; zero out buffer
            dey
            bne 310$
            ldy *buf1len        ; bi_read_udec input len param
            jsr bi_read_udec
           ;inc *buf0ptr        ; output starts at [buf0ptr]+1
           ;bne 400$
           ;inc *buf0ptr+1
400$:       ;   Drop leading 0 bytes of unsigned conversion
            clv                 ; for later BRA
            ldy #1              ; [buf0ptr] continues to use 1-based indexing
410$:       lda [*buf0ptr],y
            bne 500$            ; not $00, thus all leading $00 stripped
            dec *buf0len        ; strip by reducing length by one
            inc *buf0ptr        ;   and moving start point up
            bne 410$
            inc *buf0ptr+1
            bvc 410$            ; BRA
500$:       ;   Produce final result in [buf2ptr₁] with 1-based indexing.
            ldx *sign           ; is our final result negative?
            bmi 600$            ; yes, go do that.
            ;   Positive final result.
            ;   Calculate and store length.
            lda *buf0len
            sta [*buf2ptr],y    ; assume output len is that of bi_read_udec
            lda [*buf0ptr],y    ; get MSB of bi_read_udec output
            bpl 550$            ; if positive, sign extension not required
            lda [*buf2ptr],y    ; it's negative; increment length
            clc
            adc #1
            sta [*buf2ptr],y
            inc *buf2ptr        ; and move past length byte
            bne 510$
            inc *buf2ptr+1
510$:       lda #0              ; positive sign extension
            sta [*buf2ptr],y    ;   in MSB of result
550$:       ;   Length and sign extension done; copy bi_read_udec output
            ;   (buf0ptr and buf2ptr continue with using 1-based indexing here)
            inc *buf2ptr        ; move past len/sign-ext byte
            bne 560$
            inc *buf2ptr+1
560$:       ldy *buf0len        ; start at LSB
570$:       lda [*buf0ptr],y    ; and copy up to MSB
            sta [*buf2ptr],y
            dey
            beq 900$            ; done
            bne 570$            ; BRA
600$:       ;   Negative final result.
            ;   Calculate and store length.
            lda *buf0len
            sta [*buf2ptr],y    ; assume output len is that of bi_read_udec
            lda [*buf0ptr],y    ; get MSB of bi_read_udec output
            bpl 650$            ; if positive, 2's complement will fit into
                                ; a byte so sign extension not required
            lda [*buf2ptr],y    ; negative extension needed; increment length
            clc
            adc #1
            sta [*buf2ptr],y
            inc *buf2ptr        ; and move past length byte
            bne 610$
            inc *buf2ptr+1
610$:       lda #0FF            ; negative sign extension
            sta [*buf2ptr],y    ;   in MSB of result
650$:       ;   Length and sign extension done
            inc *buf2ptr        ; move past len/sign-ext byte
            bne 660$
            inc *buf2ptr+1
660$:       clc
            ldy *buf0len        ; start at LSB
670$:       lda [*buf0ptr],y
        BRK
            eor #0FF            ; convert...
            adc #1              ;   ...to 2's complement
            sta [*buf2ptr],y
            dey
            bne 670$            ; not done yet
900$:       rts

            .area ZP  (abs,pag)
sign:       .ds 1               ; saved sign of input
            .area _CODE
